"use strict";(self.webpackChunkneuraltrust_docs=self.webpackChunkneuraltrust_docs||[]).push([[4406],{1843:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"sdks/python-sdk/usage/tracing","title":"Tracing","description":"This guide demonstrates how to use Neural Trust\'s tracing functionality to monitor and analyze conversations in your AI application.","source":"@site/docs/sdks/python-sdk/usage/tracing.md","sourceDirName":"sdks/python-sdk/usage","slug":"/sdks/python-sdk/usage/tracing","permalink":"/sdks/python-sdk/usage/tracing","draft":false,"unlisted":false,"editUrl":"https://github.com/NeuralTrust/neuraltrust/blob/main/docs/sdks/python-sdk/usage/tracing.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Functional Evaluation Set Generation","permalink":"/sdks/python-sdk/usage/functional-evaluation-set"},"next":{"title":"Compliance scan","permalink":"/sdks/python-sdk/usage/scan"}}');var i=t(4848),r=t(8453);const s={sidebar_position:2},o="Tracing",l={},c=[{value:"Setup and Initialization",id:"setup-and-initialization",level:2},{value:"Creating a Trace",id:"creating-a-trace",level:2},{value:"Message Handling",id:"message-handling",level:2},{value:"Generation Tracking",id:"generation-tracking",level:3},{value:"Router Implementation",id:"router-implementation",level:3},{value:"Retrieval Operations",id:"retrieval-operations",level:3},{value:"Agent Interactions",id:"agent-interactions",level:3},{value:"Completing the Message",id:"completing-the-message",level:3},{value:"Complete Script",id:"complete-script",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"tracing",children:"Tracing"})}),"\n",(0,i.jsx)(n.p,{children:"This guide demonstrates how to use Neural Trust's tracing functionality to monitor and analyze conversations in your AI application."}),"\n",(0,i.jsx)(n.h2,{id:"setup-and-initialization",children:"Setup and Initialization"}),"\n",(0,i.jsx)(n.p,{children:"First, we need to set up our environment and initialize the Neural Trust client:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import os\nfrom dotenv import load_dotenv\nfrom neuraltrust import Metadata, NeuralTrust, User\n\n# Load environment variables\nload_dotenv()\n\n# Initialize the Neural Trust client with async support\nclient = NeuralTrust(\n    api_key=os.getenv("NEURALTRUST_API_KEY"), \n    async_client=True\n)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-trace",children:"Creating a Trace"}),"\n",(0,i.jsx)(n.p,{children:"A trace represents the overall context of a conversation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'trace = client.trace(\n    conversation_id="conversation_12345678",\n    session_id="session_12345678",\n    channel_id="channel_12345678",\n    user=User(id="user_12345678", name="John Doe"),\n    metadata=Metadata(id="metadata_12345678", name="John Doe"),\n    custom={"key": "value"},\n)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"message-handling",children:"Message Handling"}),"\n",(0,i.jsx)(n.p,{children:"Messages are the top-level components of a conversation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'message = trace.message(input="Hello, how are you?")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"generation-tracking",children:"Generation Tracking"}),"\n",(0,i.jsx)(n.p,{children:"Track AI-generated responses:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'generation = message.generation(input="Hello, how are you?")\ngeneration.end("I am fine, thank you!")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"router-implementation",children:"Router Implementation"}),"\n",(0,i.jsx)(n.p,{children:"Handle routing logic:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'router = message.router(input="Hello, how are you?")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"retrieval-operations",children:"Retrieval Operations"}),"\n",(0,i.jsx)(n.p,{children:"Track data retrieval operations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'retrieval = router.retrieval(input="Hello, how are you?")\nretrieval.end([{"chunk": "Hello, how are you?"}])\n'})}),"\n",(0,i.jsx)(n.h3,{id:"agent-interactions",children:"Agent Interactions"}),"\n",(0,i.jsx)(n.p,{children:"Monitor agent responses:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'agent = retrieval.agent(input="Hello, how are you?")\nagent.end("I am fine, thank you!")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"completing-the-message",children:"Completing the Message"}),"\n",(0,i.jsx)(n.p,{children:"Finally, close the message trace:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'message.end("I am fine, thank you!")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"complete-script",children:"Complete Script"}),"\n",(0,i.jsx)(n.p,{children:"Here's the complete script for reference:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import os\nfrom dotenv import load_dotenv\nfrom neuraltrust import Metadata, NeuralTrust, User\n\nload_dotenv()\n\nclient = NeuralTrust(api_key=os.getenv("NEURALTRUST_API_KEY"), async_client=True)\n\ntrace = client.trace(\n    conversation_id="conversation_12345678",\n    session_id="session_12345678",\n    channel_id="channel_12345678",\n    user=User(id="user_12345678", name="John Doe"),\n    metadata=Metadata(id="metadata_12345678", name="John Doe"),\n    custom={"key": "value"},\n)\n\nmessage = trace.message(input="Hello, how are you?")\n\ngeneration = message.generation(input="Hello, how are you?")\ngeneration.end("I am fine, thank you!")\n\nrouter = message.router(input="Hello, how are you?")\n\nretrieval = router.retrieval(input="Hello, how are you?")\nretrieval.end([{"chunk": "Hello, how are you?"}])\n\nagent = retrieval.agent(input="Hello, how are you?")\nagent.end("I am fine, thank you!")\n\nmessage.end("I am fine, thank you!")\n'})}),"\n",(0,i.jsx)(n.p,{children:"This script demonstrates a complete flow of tracing various components in a conversation, from initialization to message completion. Each step is tracked and can be analyzed through the Neural Trust platform."}),"\n",(0,i.jsx)(n.p,{children:"The tracing functionality helps you monitor:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Overall conversation context"}),"\n",(0,i.jsx)(n.li,{children:"Individual messages"}),"\n",(0,i.jsx)(n.li,{children:"AI-generated responses"}),"\n",(0,i.jsx)(n.li,{children:"Routing decisions"}),"\n",(0,i.jsx)(n.li,{children:"Data retrieval operations"}),"\n",(0,i.jsx)(n.li,{children:"Agent interactions"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This information can be valuable for debugging, monitoring, and improving your AI application's performance and behavior."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(6540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);