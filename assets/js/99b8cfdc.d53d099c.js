"use strict";(self.webpackChunkneuraltrust_docs=self.webpackChunkneuraltrust_docs||[]).push([[3363],{9299:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"red-teaming/testsets","title":"Test Sets","description":"Test Sets provide automated testing and validation for LLM applications.","source":"@site/docs/red-teaming/testsets.md","sourceDirName":"red-teaming","slug":"/red-teaming/testsets","permalink":"/neuraltrust/red-teaming/testsets","draft":false,"unlisted":false,"editUrl":"https://github.com/NeuralTrust/neuraltrust/blob/main/docs/red-teaming/testsets.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Knowledge Bases","permalink":"/neuraltrust/red-teaming/knowledge-bases"},"next":{"title":"SDKs","permalink":"/neuraltrust/category/sdks"}}');var i=n(4848),r=n(8453);const a={sidebar_position:4},l="Test Sets",o={},d=[{value:"Usage",id:"usage",level:2},{value:"Features",id:"features",level:2},{value:"Test Types",id:"test-types",level:3},{value:"Automation",id:"automation",level:3},{value:"Integration",id:"integration",level:3}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"test-sets",children:"Test Sets"})}),"\n",(0,i.jsx)(t.p,{children:"Test Sets provide automated testing and validation for LLM applications."}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:'import { NeuralTrust } from \'neuraltrust\';\n\nconst client = new NeuralTrust({ apiKey: "your_api_key_here" });\n\n// Create a test set\nconst testset = await client.createTestset({\n    name: "My Testset",\n    type: "adversarial",\n    evaluationSetId: "eval_set_id",\n    knowledgeBaseId: "kb_id",\n    numQuestions: 10\n});\n\n// Get test results\nconst results = await client.getTestset({ \n    id: "testset_id" \n});\n\n// Delete test set\nawait client.deleteTestset({ \n    id: "testset_id" \n});\n'})}),"\n",(0,i.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,i.jsx)(t.h3,{id:"test-types",children:"Test Types"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Functional testing"}),"\n",(0,i.jsx)(t.li,{children:"Security testing"}),"\n",(0,i.jsx)(t.li,{children:"Performance testing"}),"\n",(0,i.jsx)(t.li,{children:"Compliance testing"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"automation",children:"Automation"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Test generation"}),"\n",(0,i.jsx)(t.li,{children:"Result analysis"}),"\n",(0,i.jsx)(t.li,{children:"Report creation"}),"\n",(0,i.jsx)(t.li,{children:"Trend tracking"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"integration",children:"Integration"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"CI/CD pipeline support"}),"\n",(0,i.jsx)(t.li,{children:"Automated workflows"}),"\n",(0,i.jsx)(t.li,{children:"Results notification"}),"\n",(0,i.jsx)(t.li,{children:"Historical analysis"}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var s=n(6540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);