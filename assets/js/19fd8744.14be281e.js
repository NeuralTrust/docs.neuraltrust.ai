"use strict";(self.webpackChunkneuraltrust_docs=self.webpackChunkneuraltrust_docs||[]).push([[6016],{23231:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"sdks/python-sdk/api-reference/testset-client","title":"TestsetClient","description":"Client for managing testsets through the NeuralTrust API. This class provides methods for creating, retrieving, listing, and deleting testsets.","source":"@site/docs/sdks/python-sdk/api-reference/testset-client.md","sourceDirName":"sdks/python-sdk/api-reference","slug":"/sdks/python-sdk/api-reference/testset-client","permalink":"/sdks/python-sdk/api-reference/testset-client","draft":false,"unlisted":false,"editUrl":"https://github.com/NeuralTrust/neuraltrust/blob/main/docs/sdks/python-sdk/api-reference/testset-client.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"ScannerClient","permalink":"/sdks/python-sdk/api-reference/scanner-client"},"next":{"title":"EvaluationSetClient","permalink":"/sdks/python-sdk/api-reference/evaluation-set-client"}}');var i=t(74848),r=t(28453);const l={sidebar_position:5},d="TestsetClient",c={},a=[{value:"Methods",id:"methods",level:2},{value:"<code>list()</code>",id:"list",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"<code>create()</code>",id:"create",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"Returns:",id:"returns-1",level:4},{value:"<code>get()</code>",id:"get",level:3},{value:"Parameters:",id:"parameters-2",level:4},{value:"Returns:",id:"returns-2",level:4},{value:"<code>delete()</code>",id:"delete",level:3},{value:"Parameters:",id:"parameters-3",level:4},{value:"Returns:",id:"returns-3",level:4},{value:"Usage Example",id:"usage-example",level:2}];function o(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"testsetclient",children:"TestsetClient"})}),"\n",(0,i.jsx)(s.p,{children:"Client for managing testsets through the NeuralTrust API. This class provides methods for creating, retrieving, listing, and deleting testsets."}),"\n",(0,i.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(s.h3,{id:"list",children:(0,i.jsx)(s.code,{children:"list()"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"def list(\n    self, \n    *, \n    request_options: Optional[RequestOptions] = None\n) -> TestsetResponseList\n"})}),"\n",(0,i.jsx)(s.p,{children:"Lists all available testsets."}),"\n",(0,i.jsx)(s.h4,{id:"parameters",children:"Parameters:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"request_options"})," (Optional[RequestOptions]): Request-specific configuration."]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"returns",children:"Returns:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"TestsetResponseList"}),": List of testset responses."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"create",children:(0,i.jsx)(s.code,{children:"create()"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"def create(\n    self,\n    *,\n    name: str,\n    type: TestsetType,\n    evaluation_set_id: str,\n    knowledge_base_id: str,\n    num_questions: int,\n    request_options: Optional[RequestOptions] = None\n) -> TestsetResponse\n"})}),"\n",(0,i.jsx)(s.p,{children:"Creates a new testset."}),"\n",(0,i.jsx)(s.h4,{id:"parameters-1",children:"Parameters:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"name"})," (str): Name of the testset."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"type"})," (TestsetType): Type of the testset."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"evaluation_set_id"})," (str): ID of the EvaluationSet."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"knowledge_base_id"})," (str): ID of the knowledge base."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"num_questions"})," (int): Number of questions in the testset."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"request_options"})," (Optional[RequestOptions]): Request-specific configuration."]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"returns-1",children:"Returns:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"TestsetResponse"}),": The created testset response."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"get",children:(0,i.jsx)(s.code,{children:"get()"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"def get(\n    self, \n    id: str, \n    *, \n    request_options: Optional[RequestOptions] = None\n) -> TestsetResponse\n"})}),"\n",(0,i.jsx)(s.p,{children:"Retrieves a specific testset by ID."}),"\n",(0,i.jsx)(s.h4,{id:"parameters-2",children:"Parameters:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"id"})," (str): ID of the testset to retrieve."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"request_options"})," (Optional[RequestOptions]): Request-specific configuration."]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"returns-2",children:"Returns:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"TestsetResponse"}),": The requested testset response."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"delete",children:(0,i.jsx)(s.code,{children:"delete()"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"def delete(\n    self, \n    id: str, \n    *, \n    request_options: Optional[RequestOptions] = None\n) -> None\n"})}),"\n",(0,i.jsx)(s.p,{children:"Deletes a specific testset by ID."}),"\n",(0,i.jsx)(s.h4,{id:"parameters-3",children:"Parameters:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"id"})," (str): ID of the testset to delete."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"request_options"})," (Optional[RequestOptions]): Request-specific configuration."]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"returns-3",children:"Returns:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"None"})}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'# Initialize the NeuralTrust client\nclient = NeuralTrust(api_key="your_api_key_here")\n\n# List all testsets\ntestsets = client.testset.list()\n\n# Create a new testset\nnew_testset = client.testset.create(\n    name="My TestSet",\n    type="functional",\n    evaluation_set_id="eval_123",\n    knowledge_base_id="kb_456",\n    num_questions=10\n)\n\n# Get a specific testset\ntestset = client.testset.get(id="testset_123")\n\n# Delete a testset\nclient.testset.delete(id="testset_123")\n'})})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>d});var n=t(96540);const i={},r=n.createContext(i);function l(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);