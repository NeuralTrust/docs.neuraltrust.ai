"use strict";(self.webpackChunkneuraltrust_docs=self.webpackChunkneuraltrust_docs||[]).push([[3862],{35657:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"sdks/python-sdk/api-reference/trace-client","title":"TraceClient","description":"Client for interacting with the NeuralTrust Trace API. This class provides functionality for creating and managing traces of interactions and events in the NeuralTrust system.","source":"@site/docs/sdks/python-sdk/api-reference/trace-client.md","sourceDirName":"sdks/python-sdk/api-reference","slug":"/sdks/python-sdk/api-reference/trace-client","permalink":"/sdks/python-sdk/api-reference/trace-client","draft":false,"unlisted":false,"editUrl":"https://github.com/NeuralTrust/neuraltrust/blob/main/docs/sdks/python-sdk/api-reference/trace-client.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"EvaluationSetClient","permalink":"/sdks/python-sdk/api-reference/evaluation-set-client"},"next":{"title":"KnowledgeBaseClient","permalink":"/sdks/python-sdk/api-reference/knowledge-base-client"}}');var r=t(74848),i=t(28453);const a={sidebar_position:7},c="TraceClient",l={},o=[{value:"Constructor",id:"constructor",level:2},{value:"Parameters:",id:"parameters",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>trace()</code>",id:"trace",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"Returns:",id:"returns",level:4},{value:"Raises:",id:"raises",level:4},{value:"Usage Example",id:"usage-example",level:2},{value:"Async Support",id:"async-support",level:2},{value:"Async Usage Example",id:"async-usage-example",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"traceclient",children:"TraceClient"})}),"\n",(0,r.jsx)(n.p,{children:"Client for interacting with the NeuralTrust Trace API. This class provides functionality for creating and managing traces of interactions and events in the NeuralTrust system."}),"\n",(0,r.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"TraceClient(*, client_wrapper: SyncClientWrapper)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"client_wrapper"})," (SyncClientWrapper): The client wrapper instance for making HTTP requests."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(n.h3,{id:"trace",children:(0,r.jsx)(n.code,{children:"trace()"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def trace(\n    *,\n    conversation_id: str,\n    interaction_id: str,\n    type: str,\n    task: TraceTask,\n    session_id: Optional[str] = OMIT,\n    channel_id: Optional[str] = OMIT,\n    input: Optional[str] = OMIT,\n    output: Optional[str] = OMIT,\n    feedback_tag: Optional[TraceFeedbackTag] = OMIT,\n    feedback_text: Optional[str] = OMIT,\n    start_timestamp: Optional[str] = OMIT,\n    end_timestamp: Optional[str] = OMIT,\n    latency: Optional[int] = OMIT,\n    custom: Optional[str] = OMIT,\n    user: Optional[User] = OMIT,\n    metadata: Optional[Metadata] = OMIT,\n    request_options: Optional[RequestOptions] = None\n) -> TraceResponse\n"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a new trace entry in the system."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-1",children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"conversation_id"})," (str): Unique identifier for the conversation."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"interaction_id"})," (str): Unique identifier for the interaction."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"})," (str): Type of trace being recorded."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"task"})," (TraceTask): Task to perform."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"session_id"})," (Optional[str]): Session identifier."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"channel_id"})," (Optional[str]): Channel identifier."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"input"})," (Optional[str]): Content to retrieve or generate."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"output"})," (Optional[str]): Generated content."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"feedback_tag"})," (Optional[TraceFeedbackTag]): Feedback tag for the trace."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"feedback_text"})," (Optional[str]): Feedback text content."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"start_timestamp"})," (Optional[str]): Start timestamp of the trace."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"end_timestamp"})," (Optional[str]): End timestamp of the trace."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"latency"})," (Optional[int]): Latency of the trace in milliseconds."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"custom"})," (Optional[str]): Custom data to include with the trace."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user"})," (Optional[User]): User associated with the trace."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"metadata"})," (Optional[Metadata]): Additional metadata for the trace."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"request_options"})," (Optional[RequestOptions]): Request-specific configuration."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns",children:"Returns:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TraceResponse"}),": Response containing the trace information."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"raises",children:"Raises:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"MethodNotAllowedError"}),": When the HTTP method is not allowed."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ApiError"}),": When an API error occurs."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from neuraltrust import NeuralTrustApi\nfrom neuraltrust.types import User, Metadata\n\n# Initialize the client\nclient = NeuralTrustApi(api_key="YOUR_API_KEY")\n\n# Create a trace\nresponse = client.trace.trace(\n    conversation_id="conv123",\n    interaction_id="int456",\n    type="message",\n    task="retrieval",\n    user=User(id="user123", name="John Doe"),\n    metadata={"app_version": "1.0.0"}\n)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"async-support",children:"Async Support"}),"\n",(0,r.jsxs)(n.p,{children:["The TraceClient also provides an async version ",(0,r.jsx)(n.code,{children:"AsyncTraceClient"})," with identical methods but supporting asynchronous operations."]}),"\n",(0,r.jsx)(n.h3,{id:"async-usage-example",children:"Async Usage Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import asyncio\nfrom neuraltrust import AsyncNeuralTrustApi\n\nasync def main():\n    client = AsyncNeuralTrustApi(api_key="YOUR_API_KEY")\n    \n    response = await client.trace.trace(\n        conversation_id="conv123",\n        interaction_id="int456",\n        type="message",\n        task="retrieval"\n    )\n\nasyncio.run(main())\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(96540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);