"use strict";(self.webpackChunkneuraltrust_docs=self.webpackChunkneuraltrust_docs||[]).push([[262],{4693:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"AI Gateway/Development/traffic-management","title":"Traffic Management","description":"The gateway supports two methods of traffic distribution across multiple target endpoints:","source":"@site/docs/AI Gateway/Development/traffic-management.md","sourceDirName":"AI Gateway/Development","slug":"/AI Gateway/Development/traffic-management","permalink":"/neuraltrust/AI Gateway/Development/traffic-management","draft":false,"unlisted":false,"editUrl":"https://github.com/NeuralTrust/neuraltrust/blob/main/docs/AI%20Gateway/Development/traffic-management.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Parallel Plugin Execution","permalink":"/neuraltrust/AI Gateway/Development/parallel-plugin-execution"},"next":{"title":"Development","permalink":"/neuraltrust/AI Gateway/Development/"}}');var a=n(4848),r=n(8453);const s={sidebar_position:4},o="Traffic Management",l={},u=[{value:"Round-Robin Distribution",id:"round-robin-distribution",level:2},{value:"Weighted Distribution",id:"weighted-distribution",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"traffic-management",children:"Traffic Management"})}),"\n",(0,a.jsx)(t.p,{children:"The gateway supports two methods of traffic distribution across multiple target endpoints:\nRound-Robin Distribution"}),"\n",(0,a.jsx)(t.h2,{id:"round-robin-distribution",children:"Round-Robin Distribution"}),"\n",(0,a.jsx)(t.p,{children:"When multiple targets are specified without weights, requests are distributed evenly across all targets in a round-robin fashion. This is useful for basic load balancing."}),"\n",(0,a.jsx)(t.p,{children:"Example rule with round-robin distribution:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:'curl -X POST http://localhost:8080/api/v1/tenants/{tenant_id}/rules \\\n  -H "Authorization: Bearer {api_key}" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "path": "/api/*",\n    "targets": [\n      {"url": "https://api1.example.com"},\n      {"url": "https://api2.example.com"},\n      {"url": "https://api3.example.com"}\n    ],\n    "methods": ["GET", "POST"],\n    "strip_path": true\n  }\'\n'})}),"\n",(0,a.jsx)(t.h2,{id:"weighted-distribution",children:"Weighted Distribution"}),"\n",(0,a.jsx)(t.p,{children:"For more precise traffic control, you can specify percentage-based weights. The weights must sum to 100%. This is particularly useful for:"}),"\n",(0,a.jsx)(t.p,{children:"Canary deployments\nA/B testing\nGradual traffic migration\nBlue/Green deployments"}),"\n",(0,a.jsx)(t.p,{children:"Example rule with weighted distribution:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:'curl -X POST http://localhost:8080/api/v1/tenants/{tenant_id}/rules \\\n  -H "Authorization: Bearer {api_key}" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "path": "/api/*",\n    "targets": [\n      {\n        "url": "https://production.example.com",\n        "weight": 90\n      },\n      {\n        "url": "https://canary.example.com",\n        "weight": 10\n      }\n    ],\n    "methods": ["GET", "POST"],\n    "strip_path": true\n  }\'\n'})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var i=n(6540);const a={},r=i.createContext(a);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);