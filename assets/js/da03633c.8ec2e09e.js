"use strict";(self.webpackChunkneuraltrust_docs=self.webpackChunkneuraltrust_docs||[]).push([[7894],{7961:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"observability/tracing","title":"Tracing","description":"Comprehensive tracing capabilities for monitoring and debugging your LLM applications.","source":"@site/docs/observability/tracing.md","sourceDirName":"observability","slug":"/observability/tracing","permalink":"/neuraltrust/observability/tracing","draft":false,"unlisted":false,"editUrl":"https://github.com/NeuralTrust/neuraltrust/blob/main/docs/observability/tracing.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Observability Overview","permalink":"/neuraltrust/observability/overview"},"next":{"title":"Alerts","permalink":"/neuraltrust/observability/alerts"}}');var t=s(4848),i=s(8453);const a={sidebar_position:1},l="Tracing",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Event Types",id:"event-types",level:2},{value:"Core Events",id:"core-events",level:3},{value:"Additional Events",id:"additional-events",level:3},{value:"Nested Tracing (Recommended)",id:"nested-tracing-recommended",level:2},{value:"Additional Features",id:"additional-features",level:2},{value:"Metadata",id:"metadata",level:3},{value:"User Context",id:"user-context",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Error Handling Example",id:"error-handling-example",level:2},{value:"Next Steps",id:"next-steps",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"tracing",children:"Tracing"})}),"\n",(0,t.jsx)(n.p,{children:"Comprehensive tracing capabilities for monitoring and debugging your LLM applications."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The tracing system captures detailed information about your LLM application's behavior and performance. This includes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Message flows"}),"\n",(0,t.jsx)(n.li,{children:"Tool usage"}),"\n",(0,t.jsx)(n.li,{children:"Agent interactions"}),"\n",(0,t.jsx)(n.li,{children:"Data retrievals"}),"\n",(0,t.jsx)(n.li,{children:"Response generations"}),"\n",(0,t.jsx)(n.li,{children:"System events"}),"\n",(0,t.jsx)(n.li,{children:"Custom events"}),"\n",(0,t.jsx)(n.li,{children:"User feedback"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.p,{children:"Create a trace and add events:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Initialize a trace\nconst trace = client.trace({\n    conversationId: "conv_123",\n    sessionId: "session_123"\n});\n\n// Add a message event\nconst message = trace.message("User: What\'s the weather?");\nawait message.end("Bot: It\'s sunny!");\n'})}),"\n",(0,t.jsx)(n.h2,{id:"event-types",children:"Event Types"}),"\n",(0,t.jsx)(n.h3,{id:"core-events",children:"Core Events"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MESSAGE"})," - Root-level conversation events"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const message = trace.message("User input");\nawait message.end("Bot response");\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TOOL"})," - External tool usage"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const tool = message.tool("Calling weather API");\nawait tool.end("API response received");\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GENERATION"})," - LLM generations"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const generation = message.generation("Generating response");\nawait generation.end("Response generated");\n'})}),"\n",(0,t.jsx)(n.h3,{id:"additional-events",children:"Additional Events"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AGENT"}),": Track agent decisions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"RETRIEVAL"}),": Document/data retrievals"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ROUTER"}),": Request routing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SYSTEM"}),": System events"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CUSTOM"}),": Custom event types"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"FEEDBACK"}),": User feedback"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"nested-tracing-recommended",children:"Nested Tracing (Recommended)"}),"\n",(0,t.jsx)(n.p,{children:"Create hierarchical traces to track complex flows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Create parent trace\nconst message = trace.message("Weather request");\n\n// Add child traces\nconst retrieval = message.retrieval("Fetching data");\nawait retrieval.end("Data retrieved");\n\nconst generation = retrieval.generation("Creating response");\nawait generation.end("Response ready");\n\n// End parent trace\nawait message.end("Request completed");\n'})}),"\n",(0,t.jsx)(n.h2,{id:"additional-features",children:"Additional Features"}),"\n",(0,t.jsx)(n.h3,{id:"metadata",children:"Metadata"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const trace = client.trace({\n    conversationId: "conv_123",\n    metadata: {\n        version: "1.0.0",\n        environment: "production"\n    }\n});\n'})}),"\n",(0,t.jsx)(n.h3,{id:"user-context",children:"User Context"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const trace = client.trace({\n    conversationId: "conv_123",\n    user: {\n        id: "user_123",\n        name: "John Doe"\n    }\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Use Nested Tracing"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Creates clear request hierarchy"}),"\n",(0,t.jsx)(n.li,{children:"Automatically manages relationships"}),"\n",(0,t.jsx)(n.li,{children:"Simplifies debugging"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Add Context"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Include relevant metadata"}),"\n",(0,t.jsx)(n.li,{children:"Add user information"}),"\n",(0,t.jsx)(n.li,{children:"Track environment details"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Handle Errors"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use try/catch blocks"}),"\n",(0,t.jsx)(n.li,{children:"End traces properly"}),"\n",(0,t.jsx)(n.li,{children:"Include error information"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"error-handling-example",children:"Error Handling Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'try {\n    const trace = client.trace({\n        conversationId: "conv_123",\n        metadata: { version: "1.0.0" }\n    });\n\n    const message = trace.message("Processing request");\n    \n    try {\n        // Your processing logic here\n        await message.end("Success");\n    } catch (error) {\n        await message.end(`Error: ${error.message}`);\n        throw error;\n    }\n} catch (error) {\n    console.error("Trace error:", error);\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/neuraltrust/getting-started/quickstart",children:"Platform Overview"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/neuraltrust/red-teaming/knowledge-bases",children:"Knowledge Base Guide"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/neuraltrust/red-teaming/evaluation-sets",children:"Evaluation Sets"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var r=s(6540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);