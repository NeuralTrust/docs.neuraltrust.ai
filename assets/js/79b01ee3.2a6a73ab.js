"use strict";(self.webpackChunkneuraltrust_docs=self.webpackChunkneuraltrust_docs||[]).push([[7387],{7750:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"ai-gateway/getting-started/step-by-step/load-balancing","title":"Load Balancing","description":"Load balancing helps distribute AI model requests across multiple instances for better performance and reliability. TrustGate supports multiple load balancing algorithms and health checking capabilities.","source":"@site/docs/ai-gateway/getting-started/step-by-step/load-balancing.md","sourceDirName":"ai-gateway/getting-started/step-by-step","slug":"/ai-gateway/getting-started/step-by-step/load-balancing","permalink":"/ai-gateway/getting-started/step-by-step/load-balancing","draft":false,"unlisted":false,"editUrl":"https://github.com/NeuralTrust/neuraltrust/blob/main/docs/ai-gateway/getting-started/step-by-step/load-balancing.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7,"title":"Load Balancing"},"sidebar":"tutorialSidebar","previous":{"title":"Create Rules","permalink":"/ai-gateway/getting-started/step-by-step/create-rules"},"next":{"title":"Rate Limiting","permalink":"/ai-gateway/getting-started/step-by-step/rate-limiting"}}');var i=t(74848),r=t(28453);const s={sidebar_position:7,title:"Load Balancing"},l="Load Balancing",o={},c=[{value:"Configure Load Balancing",id:"configure-load-balancing",level:2},{value:"Create an Upstream with Round-Robin Strategy",id:"create-an-upstream-with-round-robin-strategy",level:3},{value:"Create an Upstream with Weighted Round-Robin",id:"create-an-upstream-with-weighted-round-robin",level:3},{value:"Create a Service Using the Upstream",id:"create-a-service-using-the-upstream",level:2},{value:"Configure Routing Rules",id:"configure-routing-rules",level:2},{value:"Load Balancing Features",id:"load-balancing-features",level:2},{value:"Supported Algorithms",id:"supported-algorithms",level:3},{value:"Health Checks",id:"health-checks",level:3},{value:"Target Configuration",id:"target-configuration",level:3},{value:"Payload Transformation",id:"payload-transformation",level:3},{value:"Priority-Based Fallback",id:"priority-based-fallback",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"load-balancing",children:"Load Balancing"})}),"\n",(0,i.jsx)(n.p,{children:"Load balancing helps distribute AI model requests across multiple instances for better performance and reliability. TrustGate supports multiple load balancing algorithms and health checking capabilities."}),"\n",(0,i.jsx)(n.h2,{id:"configure-load-balancing",children:"Configure Load Balancing"}),"\n",(0,i.jsx)(n.h3,{id:"create-an-upstream-with-round-robin-strategy",children:"Create an Upstream with Round-Robin Strategy"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Create an upstream with round-robin load balancing\ncurl -X POST http://localhost:8080/api/v1/gateways/{gateway-id}/upstreams \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "name": "round-robin-upstream",\n    "algorithm": "round-robin",\n    "targets": [\n      {\n        "host": "api.openai.com",\n        "port": 443,\n        "protocol": "https",\n        "weight": 50,\n        "priority": 1\n      },\n      {\n        "host": "api.anthropic.com",\n        "port": 443,\n        "protocol": "https",\n        "weight": 50,\n        "priority": 1\n      }\n    ],\n    "health_checks": {\n      "passive": true,\n      "threshold": 3,\n      "interval": 60\n    }\n  }\'\n'})}),"\n",(0,i.jsx)(n.h3,{id:"create-an-upstream-with-weighted-round-robin",children:"Create an Upstream with Weighted Round-Robin"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Create an upstream with weighted distribution\ncurl -X POST http://localhost:8080/api/v1/gateways/{gateway-id}/upstreams \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "name": "weighted-upstream",\n    "algorithm": "weighted-round-robin",\n    "targets": [\n      {\n        "host": "api.openai.com",\n        "port": 443,\n        "protocol": "https",\n        "weight": 60,    # 60% of traffic\n        "priority": 1\n      },\n      {\n        "host": "api.anthropic.com",\n        "port": 443,\n        "protocol": "https",\n        "weight": 40,    # 40% of traffic\n        "priority": 1\n      }\n    ],\n    "health_checks": {\n      "passive": true,\n      "threshold": 3,\n      "interval": 60\n    }\n  }\'\n'})}),"\n",(0,i.jsx)(n.h2,{id:"create-a-service-using-the-upstream",children:"Create a Service Using the Upstream"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Create a service that uses the load-balanced upstream\ncurl -X POST http://localhost:8080/api/v1/gateways/{gateway-id}/services \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "name": "load-balanced-service",\n    "type": "upstream",\n    "description": "Load balanced AI service",\n    "upstream_id": "{upstream-id}"\n  }\'\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configure-routing-rules",children:"Configure Routing Rules"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Create a rule to route traffic to the load-balanced service\ncurl -X POST http://localhost:8080/api/v1/gateways/{gateway-id}/rules \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "path": "/ai",\n    "service_id": "{service-id}",\n    "methods": ["POST"],\n    "strip_path": true,\n    "active": true\n  }\'\n'})}),"\n",(0,i.jsx)(n.h2,{id:"load-balancing-features",children:"Load Balancing Features"}),"\n",(0,i.jsx)(n.h3,{id:"supported-algorithms",children:"Supported Algorithms"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Round Robin"}),": Distributes requests evenly across all targets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Weighted Round Robin"}),": Distributes traffic based on target weights"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"health-checks",children:"Health Checks"}),"\n",(0,i.jsx)(n.p,{children:"TrustGate supports passive health checking:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"health_checks": {\n  "passive": true,      // Enable passive health checks\n  "threshold": 3,       // Number of failures before marking target as unhealthy\n  "interval": 60        // Check interval in seconds\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"target-configuration",children:"Target Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Each target can be configured with:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Weight"}),": Determines traffic distribution (1-100)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Priority"}),": Determines target selection order (lower numbers = higher priority)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Protocol"}),": Supports HTTP/HTTPS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Host/Port"}),": Target service endpoint"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"payload-transformation",children:"Payload Transformation"}),"\n",(0,i.jsx)(n.p,{children:"When using multiple providers in an upstream, you need to include fields that cover all providers in your request. The gateway will automatically transform the request for the selected provider."}),"\n",(0,i.jsx)(n.p,{children:"For example, when load balancing between OpenAI and Anthropic:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "model": "gpt-4",                    // OpenAI model\n  "messages": [                        // OpenAI format\n    {\n      "role": "user",\n      "content": "Hello!"\n    }\n  ],\n  "max_tokens": 1000,                  // Common field\n  "system": "You are an assistant",    // Anthropic system prompt\n  "temperature": 0.7                   // Common field\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"The gateway will:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Select a target based on the load balancing algorithm"}),"\n",(0,i.jsx)(n.li,{children:"Transform the request to match the selected provider's format"}),"\n",(0,i.jsx)(n.li,{children:"Remove unnecessary fields for that provider"}),"\n",(0,i.jsx)(n.li,{children:"Add any required provider-specific headers"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"You don't need to handle the transformation yourself - just include all necessary fields in your request, and the gateway will handle the rest based on the provider schemas."}),"\n",(0,i.jsxs)(n.p,{children:["For streaming requests, add ",(0,i.jsx)(n.code,{children:'"stream": true'})," to enable streaming for all providers."]}),"\n",(0,i.jsx)(n.h3,{id:"priority-based-fallback",children:"Priority-Based Fallback"}),"\n",(0,i.jsx)(n.p,{children:"Targets can be assigned different priorities to create fallback chains:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "targets": [\n    {\n      "host": "api.openai.com",\n      "priority": 1,     // Primary target\n      "weight": 100\n    },\n    {\n      "host": "api.anthropic.com",\n      "priority": 2,     // Fallback target\n      "weight": 100\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"When a higher priority target fails:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The request automatically fails over to the next priority level"}),"\n",(0,i.jsx)(n.li,{children:"Load balancing continues among targets of the same priority"}),"\n",(0,i.jsx)(n.li,{children:"Health checks determine when to return to higher priority targets"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Health Checking"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Enable passive health checks for automatic failure detection"}),"\n",(0,i.jsx)(n.li,{children:"Set appropriate threshold values based on your requirements"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Load Distribution"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use weighted distribution for heterogeneous targets"}),"\n",(0,i.jsx)(n.li,{children:"Consider target capacity when setting weights"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Monitoring"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Regularly monitor target health status"}),"\n",(0,i.jsx)(n.li,{children:"Review traffic distribution patterns"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"After configuring load balancing:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/ai-gateway/getting-started/step-by-step/rate-limiting",children:"Configure Rate Limiting"})," to protect your services"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var a=t(96540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);